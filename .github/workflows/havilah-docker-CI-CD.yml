name: havilah docker CI CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env: 
  FRONTEND_IMAGE_NAME: havillahims
  BACKEND_IMAGE_NAME: havillahapi
  IMAGE_TAG: ${{ github.run_id }}
  DOCKER_REPO_NAME: femicancode
  AZURE_CONTAINER_URL: havillahims.h6dhhyacgsa9aqex.southafricanorth.azurecontainer.io
  AZURE_CONTAINER_DNS_NAME_LABEL: havillahims
  AZURE_CONTAINER_INATANCE_NAME: havillah-ims
  AZURE_CONTAINER_INSTANCE_LOCATION: South Africa North
  AZURE_RESOURCE_GROUP: HIMS-RG
  AZURE_SUBSCRIPTIONID: 80e570d4-d806-4879-9214-67ba31976973
  ACRNAME: sbkicksregistry1
  ACRURL: sbkicksregistry1.azurecr.io

jobs:

  build-frontend-image:
    name: Build HavillahIms Frontend Container Image
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: Havillah

    steps:
    - uses: actions/checkout@v3
    
      #Stage 1: Build
    - name: Build the Docker image
      run: docker build . --file HavillahWebUI_Server/Dockerfile --tag $DOCKER_REPO_NAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG
      
      #Stage 2: Save Image
    - name: save image as Tar
      run: docker save -o ${{ format('{0}/{1}.tar', github.workspace, env.FRONTEND_IMAGE_NAME) }} $DOCKER_REPO_NAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG
    
      #Stage 3: Upload to a location
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: HIMSFrontendImage
        path: ${{ format('{0}/{1}.tar', github.workspace, env.FRONTEND_IMAGE_NAME) }}
        
  build-backend-image:
   
      name: Build Havillahapi Backend Container Image
      runs-on: ubuntu-latest
      defaults:
        run: 
          working-directory: Havillah

      steps:
      - uses: actions/checkout@v3

        #Stage 1: Build
      - name: Build the Docker image
        run: docker build . --file API/Dockerfile --tag $DOCKER_REPO_NAME/$BACKEND_IMAGE_NAME:$IMAGE_TAG

        #Stage 2: Save Image
      - name: save image as Tar
        run: docker save -o ${{ format('{0}/{1}.tar', github.workspace, env.BACKEND_IMAGE_NAME) }} $DOCKER_REPO_NAME/$BACKEND_IMAGE_NAME:$IMAGE_TAG

        #Stage 3: Upload to a location
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: HIMSBackendImage
          path: ${{ format('{0}/{1}.tar', github.workspace, env.BACKEND_IMAGE_NAME) }}
        
  deployfrontend-image:
      name: deploy frontend image
      runs-on: ubuntu-latest
      needs: build-frontend-image
      environment:
        name: Dev
        
      steps: 
      - name: Download a Build Artifact
        id: downloadFrontendImage
        uses: actions/download-artifact@v3.0.2
        with:
          name: HIMSFrontendImage
          
        #Stage 1: Rehydrate the image
      - name: Rehydrate the image
        run: docker load -i ${{ format('{0}/{1}.tar', steps.downloadFrontendImage.outputs.download-path, env.IMAGE_NAME) }}
        
        #Stage 2: Login to azure container registry
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{env.ACRNAME}}
          password: ${{secrets.AZUREACRPASSWORD}}
          login-server: ${{env.ACRURL}}
          
        #Stage 3: Tag the frontend image
      - name: Re-Tag image
        run: docker tag $FRONTEND_IMAGE_NAME:$IMAGE_TAG $ACRNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG
        
        #Stage 3: Push to ACR
      - name: push image to acr
        run: docker image push $ACRNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG
        
  deploybackend-image:
      name: deploy backend image
      runs-on: ubuntu-latest
      needs: build-backend-image
      environment:
        name: Dev
        
      steps: 
      - name: Download a Build Artifact
        id: downloadBackendImage
        uses: actions/download-artifact@v3.0.2
        with:
          name: HIMSBackendImage
          
        #Stage 1: Rehydrate the image
      - name: Rehydrate the image
        run: docker load -i ${{ format('{0}/{1}.tar', steps.downloadBackendImage.outputs.download-path, env.IMAGE_NAME) }}
        
        #Stage 2: Login to azure container registry
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{env.ACRNAME}}
          password: ${{secrets.AZUREACRPASSWORD}}
          login-server: ${{env.ACRURL}}
          
        #Stage 3: Tag the frontend image
      - name: Re-Tag image
        run: docker tag $FRONTEND_IMAGE_NAME:$IMAGE_TAG $ACRNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG
        
        #Stage 3: Push to ACR
      - name: push image to acr
        run: docker image push $ACRNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG


        

  

